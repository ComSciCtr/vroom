#!/usr/bin/env python
############################################################
# NAME: vroom
#
# USAGE: vroom [--live ] FILENAME
#
# DESCRIPTION:
#    The vroom environment.
#
#    This program is used to run vroom applications. 
#
# ARGUMENTS:
#    FILENAME
#       The vroom source code
#
#    --live
#       Run the application in live coding mode
#
############################################################

import sys
import os
import argparse


sys.dont_write_bytecode = True

from vroom.utils.debug import *
Debug.set_level(DEBUG)

# Create and initialize the command-line argument pareser
parser = argparse.ArgumentParser()
parser.add_argument('--live', dest='live_coding_enabled', action='store_true', default=False,
                        help='enable live coding')
parser.add_argument('filename', metavar='FILENAME', type=str,
                        help='vroom application file')

parser.add_argument('program_args', nargs='*', default=[])

# Parse the command-line arguments
cl_args = parser.parse_args(sys.argv[1:])

# Verify that the vroom source file exists
if not os.path.exists(cl_args.filename):
   print('  ERROR: file ({}) does not exist'.format(cl_args.filename))
   sys.exit(1)


from vroom.core.application import Application, LiveCodingApplication
from vroom.core.data_stream import MessageListener
from vroom.utils.module_loader import load_module
import vroom.core.environment as env

import vroom.utils.debug

version = '0.1.2'
header = r''' 
   _   ___________  ____  ____ ___ 
  | | / / ___/ __ \/ __ \/ __ `__ \
  | |/ / /  / /_/ / /_/ / / / / / /
  |___/_/   \____/\____/_/ /_/ /_/
  version {}
'''


def print_header():
   print header.format(version)

def print_callbacks(func_list):
   success = vroom.utils.debug.green('*')
   fail    = vroom.utils.debug.red('X')
   print '   ' + '\n   '.join('[{}] {}'.format(success if func else fail, name) for name, func in func_list.items())
   print

def assign_app_callbacks(mod):
   
   def get_func(f):
      try:
         return mod.__dict__[f]
      except KeyError:
         return None

   func_list = { }
   functions = ['init', 'gl_init', 'display', 'frame']
   functions.extend(['button_press', 'button_release', 'motion'])
   functions.extend(['communicate'])
   for func in functions:
      func_list.setdefault(func, get_func(func))



   print_header()
   print_callbacks(func_list)

   debug(msg='assigning callbacks').flush()

   args = []
   config_path = '/usr/local/etc/vroom/mods-enabled'

   try:
      configs = [x for x in os.listdir(config_path) if x.endswith('.cfg')]
   except OSError:   
      configs = []

   for config in configs:
      debug(msg='loading module {}'.format(config)).flush()
      args.extend(['-mergeConfig', os.path.join(config_path, config)])

   debug(msg='creating application object').flush()
   if cl_args.live_coding_enabled:
      env._App = LiveCodingApplication(args=args, program_args=cl_args.program_args, **func_list)
      env._App.monitor(env._App_Path, os.path.basename(cl_args.filename))
   else:
      env._App = Application(args=args, program_args=cl_args.program_args, **func_list)

   if func_list['communicate']:
      env._Listener = MessageListener(env._App.communicate)
      env._Listener.start()

def main():

   mod = load_module(cl_args.filename)

   assign_app_callbacks(mod)

   debug(msg='lauching application').flush()

   try:
      env._App.run()
   except KeyboardInterrupt:
      if env._Listener:
         env._Listener.stop()

   if env._Listener:
      env._Listener.stop()

if __name__ == '__main__':
   main()

