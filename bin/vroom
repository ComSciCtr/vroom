#!/usr/bin/env python
############################################################
# NAME: vroom
#
# USAGE: vroom [--live ] FILENAME
#
# DESCRIPTION:
#    The vroom environment.
#
#    This program is used to run vroom applications. 
#
# ARGUMENTS:
#    FILENAME
#       The vroom source code
#
#    --live
#       Run the application in live coding mode
#
############################################################

import sys
import os
import argparse

# Create and initialize the command-line argument pareser
parser = argparse.ArgumentParser()
parser.add_argument('--live', dest='live_coding_enabled', action='store_true', default='store_false',
                        help='enable live coding')
parser.add_argument('filename', metavar='FILENAME', type=str,
                        help='vroom application file')

# Parse the command-line arguments
cl_args = parser.parse_args(sys.argv[1:])


# Verify that the vroom source file exists
if not os.path.exists(cl_args.filename):
   print('  ERROR: file ({}) does not exist'.format(cl_args.filename))
   sys.exit(1)


import vroom

version = '0.1.1'
header = r''' 
   _   ___________  ____  ____ ___ 
  | | / / ___/ __ \/ __ \/ __ `__ \
  | |/ / /  / /_/ / /_/ / / / / / /
  |___/_/   \____/\____/_/ /_/ /_/
  version {}
'''

print header.format(version)

def assign_app_callbacks(mod):
   
   def get_func(f):
      try:
         return mod.__dict__[f]
      except KeyError:
         return None

   func_list = { }
   for func in ['init', 'gl_init', 'draw', 'frame', 'button_press', 'button_release', 'motion']:
      func_list.setdefault(func, get_func(func))

   escape  = lambda code: '\033[{}m'.format(code)
   success = lambda: escape(32) + '*' + escape(0)
   fail    = lambda: escape(31) + 'X' + escape(0)

   print ' -- assigning callbacks\n'
   print '   ' + '\n   '.join('[{}] {}'.format(success() if func else fail(), name) for name, func in func_list.items())
   print  

   args = []
   config_path = '/usr/local/etc/vroom/mods-enabled'

   try:
      configs = [x for x in os.listdir(config_path) if x.endswith('.cfg')]
   except OSError:   
      configs = []

   for config in configs:
      print ' -- found config file: {}'.format(config)
      args.extend(['-mergeConfig', os.path.join(config_path, config)])

   print ' -- creating application object'
   if cl_args.live_coding_enabled:
      vroom._App = vroom.application.LiveCodingApplication(args=args, **func_list)
      vroom._App.monitor(vroom._App_Path, os.path.basename(cl_args.filename))
   else:
      vroom._App = vroom.application.Application(args=args, **func_list)

def main():

   mod = vroom.load_module(cl_args.filename)

   assign_app_callbacks(mod)

   print ' -- lauching application'
   vroom._App.run()

if __name__ == '__main__':
   main()

